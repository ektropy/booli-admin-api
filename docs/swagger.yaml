basePath: /api/v1
host: localhost:8081
info:
  contact:
    email: support@booli.ai
    name: Booli Admin API Support
  description: Multi-tenant admin portal with Keycloak authentication and MSP support
  license:
    name: CC BY-NC-ND 4.0
    url: https://creativecommons.org/licenses/by-nc-nd/4.0/
  title: Booli Admin API
  version: "1.0"
paths:
  /admin/roles:
    get:
      description: Get list of roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - roles
  /admin/roles/{id}:
    delete:
      description: Delete role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - roles
    get:
      description: Get role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get role
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - roles
  /admin/tenants:
    get:
      description: 'Get paginated list of tenants (admin: all tenants, MSP: their
        tenants)'
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List tenants
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new tenant
      parameters:
      - description: Tenant creation request
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create tenant
      tags:
      - admin
  /admin/tenants/{id}:
    delete:
      description: Delete tenant by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete tenant
      tags:
      - admin
    get:
      description: Get tenant by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get tenant
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update tenant by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      - description: Tenant update request
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update tenant
      tags:
      - admin
  /admin/tenants/{id}/provision-realm:
    post:
      description: Provision Keycloak realm for tenant
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Provision Keycloak realm
      tags:
      - admin
  /admin/users:
    get:
      description: Get paginated list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /admin/users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /audit/export:
    post:
      consumes:
      - application/json
      description: Export audit logs to various formats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Export audit logs
      tags:
      - audit
  /audit/logs:
    get:
      description: Get paginated list of audit logs
      parameters:
      - description: Start date
        in: query
        name: start_date
        type: string
      - description: End date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List audit logs
      tags:
      - audit
  /audit/logs/{id}:
    get:
      description: Get audit log by ID
      parameters:
      - description: Audit log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get audit log
      tags:
      - audit
  /auth/callback:
    get:
      description: Handle OAuth2/OIDC callback and exchange code for tokens
      parameters:
      - description: Provider name
        in: query
        name: provider
        type: string
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      - description: State parameter
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Handle OAuth callback
      tags:
      - authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Start OAuth2/OIDC login flow
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            redirect_uri:
              type: string
            state:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Initiate login
      tags:
      - authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate tokens
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Logout
      tags:
      - authentication
  /auth/providers:
    get:
      description: Get list of available OIDC authentication providers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get authentication providers
      tags:
      - authentication
  /auth/providers/{provider}/.well-known:
    get:
      description: Get OIDC well-known configuration for a specific provider
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get provider well-known configuration
      tags:
      - authentication
  /auth/service-token:
    post:
      consumes:
      - application/json
      description: Get service-to-service authentication token
      parameters:
      - description: Service token request
        in: body
        name: request
        required: true
        schema:
          properties:
            client_id:
              type: string
            client_secret:
              type: string
            scope:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Get service token
      tags:
      - authentication
  /auth/service-validate:
    post:
      consumes:
      - application/json
      description: Validate a service-to-service token
      parameters:
      - description: Service token validation request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Validate service token
      tags:
      - authentication
  /auth/userinfo:
    get:
      description: Get user information from access token
      parameters:
      - description: Provider name
        in: query
        name: provider
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user info
      tags:
      - authentication
  /auth/validate:
    post:
      consumes:
      - application/json
      description: Validate an access token or ID token
      parameters:
      - description: Token validation request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Validate token
      tags:
      - authentication
  /health:
    get:
      description: Get application health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /health/keycloak:
    get:
      description: Validate Keycloak configuration and connectivity
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service Unavailable
          schema:
            additionalProperties: true
            type: object
      summary: Keycloak health check
      tags:
      - health
  /roles:
    get:
      description: Get list of roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - roles
  /roles/{id}:
    delete:
      description: Delete role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - roles
    get:
      description: Get role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get role
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - roles
  /sso/providers:
    get:
      description: Get list of SSO providers for tenant
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List SSO providers
      tags:
      - sso
    post:
      consumes:
      - application/json
      description: Create a new SSO provider
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create SSO provider
      tags:
      - sso
  /sso/providers/{id}:
    delete:
      description: Delete SSO provider by ID
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete SSO provider
      tags:
      - sso
    get:
      description: Get SSO provider by ID
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get SSO provider
      tags:
      - sso
    put:
      consumes:
      - application/json
      description: Update SSO provider by ID
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update SSO provider
      tags:
      - sso
  /sso/test-connection:
    post:
      consumes:
      - application/json
      description: Test SSO provider connection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Test SSO connection
      tags:
      - sso
  /users:
    get:
      description: Get paginated list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/bulk-create:
    post:
      consumes:
      - application/json
      description: Create multiple users at once
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Bulk create users
      tags:
      - users
  /users/import-csv:
    post:
      consumes:
      - multipart/form-data
      description: Import users from CSV file
      parameters:
      - description: CSV file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Import users from CSV
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
