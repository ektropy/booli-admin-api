basePath: /api/v1
definitions:
  models.BulkCreateResult:
    properties:
      failed:
        items:
          $ref: '#/definitions/models.BulkError'
        type: array
      failure_count:
        type: integer
      success_count:
        type: integer
      successful:
        items:
          $ref: '#/definitions/models.User'
        type: array
      total_processed:
        type: integer
    type: object
  models.BulkCreateUserRequest:
    properties:
      default_role_names:
        items:
          type: string
        type: array
      send_invite:
        type: boolean
      users:
        items:
          $ref: '#/definitions/models.CreateUserRequest'
        maxItems: 100
        minItems: 1
        type: array
    required:
    - users
    type: object
  models.BulkError:
    properties:
      email:
        type: string
      error:
        type: string
      row:
        type: integer
    type: object
  models.CSVError:
    properties:
      email:
        type: string
      error:
        type: string
      row:
        type: integer
    type: object
  models.CSVImportResult:
    properties:
      error_count:
        type: integer
      failed_users:
        items:
          $ref: '#/definitions/models.CSVError'
        type: array
      parse_errors:
        items:
          $ref: '#/definitions/models.CSVError'
        type: array
      success_count:
        type: integer
      successful_users:
        items:
          $ref: '#/definitions/models.User'
        type: array
      total_processed:
        type: integer
    type: object
  models.CreateTenantAccessGrantRequestSwagger:
    properties:
      access_level:
        enum:
        - read
        - read_write
        - full_access
        example: read
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      expires_at:
        example: "2025-12-31T23:59:59Z"
        type: string
      granted_by:
        example: 550e8400-e29b-41d4-a716-446655440009
        type: string
      granted_to_tenant_realm:
        example: master
        type: string
      granted_to_user_id:
        example: 550e8400-e29b-41d4-a716-446655440008
        type: string
    type: object
  models.CreateTenantEnvironmentRequestSwagger:
    properties:
      description:
        example: Main production environment
        type: string
      domains:
        items:
          $ref: '#/definitions/models.DomainSwagger'
        type: array
      egress_ips:
        items:
          $ref: '#/definitions/models.EgressIPSwagger'
        type: array
      environment:
        example: production
        type: string
      infrastructure_ips:
        items:
          $ref: '#/definitions/models.InfrastructureIPSwagger'
        type: array
      name:
        example: Production Environment
        type: string
      naming_conventions:
        items:
          $ref: '#/definitions/models.NamingConventionSwagger'
        type: array
      network_ranges:
        items:
          $ref: '#/definitions/models.NetworkRangeSwagger'
        type: array
      public_ips:
        items:
          $ref: '#/definitions/models.PublicIPSwagger'
        type: array
      tenant_domain:
        example: acme.com
        type: string
      tenant_name:
        example: Acme Corp
        type: string
      tenant_realm:
        example: client-tenant
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      attributes:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      default_role:
        type: string
      email:
        type: string
      enabled:
        type: boolean
      first_name:
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      send_invite:
        type: boolean
      temporary_password:
        type: boolean
      tenant_domain:
        type: string
      tenant_id:
        type: string
      tenant_name:
        type: string
      tenant_realm:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - username
    type: object
  models.DomainSwagger:
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      dns_provider:
        example: cloudflare
        type: string
      domain_name:
        example: example.com
        type: string
      domain_type:
        example: primary
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      expires_at:
        example: "2025-12-31T23:59:59Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440004
        type: string
      is_active:
        example: true
        type: boolean
      purpose:
        example: website
        type: string
      registrar:
        example: godaddy
        type: string
      tags:
        additionalProperties: true
        type: object
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.EgressIPSwagger:
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440003
        type: string
      ip_address:
        example: 203.0.113.10
        type: string
      ip_type:
        example: ipv4
        type: string
      is_active:
        example: true
        type: boolean
      provider:
        example: nat_gateway
        type: string
      purpose:
        example: api_calls
        type: string
      tags:
        additionalProperties: true
        type: object
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.ErrorDetailSwagger:
    properties:
      code:
        example: BAD_REQUEST
        type: string
      details:
        example: Field validation error
        type: string
      message:
        example: Invalid request body
        type: string
    type: object
  models.ErrorResponseSwagger:
    properties:
      error:
        $ref: '#/definitions/models.ErrorDetailSwagger'
      path:
        example: /api/v1/environments
        type: string
      request_id:
        example: req-123456789
        type: string
      status:
        example: 400
        type: integer
      timestamp:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.InfrastructureIPSwagger:
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      description:
        example: Primary DNS server
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      hostname:
        example: dns1.internal.example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440006
        type: string
      ip_address:
        example: 10.0.1.10
        type: string
      is_active:
        example: true
        type: boolean
      is_critical:
        example: true
        type: boolean
      port:
        example: 53
        type: integer
      service_type:
        example: dns
        type: string
      tags:
        additionalProperties: true
        type: object
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.NamingConventionSwagger:
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      description:
        example: Standard server naming convention
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      examples:
        additionalProperties: true
        type: object
      id:
        example: 550e8400-e29b-41d4-a716-446655440005
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: server-naming
        type: string
      pattern:
        example: '{env}-{service}-{number}'
        type: string
      resource_type:
        example: server
        type: string
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.NetworkRangeSwagger:
    properties:
      cidr:
        example: 10.0.0.0/16
        type: string
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      description:
        example: Internal network range
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      is_monitored:
        example: true
        type: boolean
      name:
        example: Internal Network
        type: string
      network_type:
        example: internal
        type: string
      tags:
        additionalProperties: true
        type: object
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      vlan:
        example: 100
        type: integer
    type: object
  models.PublicIPSwagger:
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      ip_address:
        example: 203.0.113.1
        type: string
      ip_type:
        example: ipv4
        type: string
      is_active:
        example: true
        type: boolean
      provider:
        example: aws
        type: string
      purpose:
        example: web
        type: string
      region:
        example: us-east-1
        type: string
      tags:
        additionalProperties: true
        type: object
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.SIEMEnrichmentDataSwagger:
    properties:
      domains:
        items:
          $ref: '#/definitions/models.DomainSwagger'
        type: array
      egress_ips:
        items:
          $ref: '#/definitions/models.EgressIPSwagger'
        type: array
      infrastructure_ips:
        items:
          $ref: '#/definitions/models.InfrastructureIPSwagger'
        type: array
      last_updated:
        example: "2024-01-01T12:00:00Z"
        type: string
      network_ranges:
        items:
          $ref: '#/definitions/models.NetworkRangeSwagger'
        type: array
      public_ips:
        items:
          $ref: '#/definitions/models.PublicIPSwagger'
        type: array
      tenant_realm:
        example: client-tenant
        type: string
    type: object
  models.TenantAccessGrantSwagger:
    properties:
      access_level:
        example: read
        type: string
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      environment_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      expires_at:
        example: "2025-12-31T23:59:59Z"
        type: string
      granted_by:
        example: 550e8400-e29b-41d4-a716-446655440009
        type: string
      granted_to_tenant_realm:
        example: master
        type: string
      granted_to_user_id:
        example: 550e8400-e29b-41d4-a716-446655440008
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440007
        type: string
      is_active:
        example: true
        type: boolean
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.TenantEnvironmentListResponseSwagger:
    properties:
      environments:
        items:
          $ref: '#/definitions/models.TenantEnvironmentSwagger'
        type: array
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total:
        example: 25
        type: integer
      total_pages:
        example: 2
        type: integer
    type: object
  models.TenantEnvironmentSwagger:
    properties:
      access_grants:
        items:
          $ref: '#/definitions/models.TenantAccessGrantSwagger'
        type: array
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "null"
        type: string
      description:
        example: Main production environment
        type: string
      domains:
        items:
          $ref: '#/definitions/models.DomainSwagger'
        type: array
      egress_ips:
        items:
          $ref: '#/definitions/models.EgressIPSwagger'
        type: array
      environment:
        example: production
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      infrastructure_ips:
        items:
          $ref: '#/definitions/models.InfrastructureIPSwagger'
        type: array
      is_active:
        example: true
        type: boolean
      name:
        example: Production Environment
        type: string
      naming_conventions:
        items:
          $ref: '#/definitions/models.NamingConventionSwagger'
        type: array
      network_ranges:
        items:
          $ref: '#/definitions/models.NetworkRangeSwagger'
        type: array
      public_ips:
        items:
          $ref: '#/definitions/models.PublicIPSwagger'
        type: array
      tenant_realm:
        example: client-tenant
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  models.UpdateTenantEnvironmentRequestSwagger:
    properties:
      description:
        example: Updated main production environment
        type: string
      environment:
        example: production
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Production Environment Updated
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      enabled:
        type: boolean
      first_name:
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      temporary_password:
        type: boolean
    type: object
  models.User:
    properties:
      email:
        type: string
      enabled:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  models.UserListResponse:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  utils.ErrorDetail:
    properties:
      code:
        example: BAD_REQUEST
        type: string
      details: {}
      message:
        example: Invalid request body
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        $ref: '#/definitions/utils.ErrorDetail'
      path:
        example: /api/v1/environments
        type: string
      request_id:
        example: req-123456789
        type: string
      status:
        example: 400
        type: integer
      timestamp:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@booli.ai
    name: Booli Admin API Support
  description: Multi-tenant admin portal with Keycloak authentication and MSP support
  license:
    name: CC BY-NC-ND 4.0
    url: https://creativecommons.org/licenses/by-nc-nd/4.0/
  title: Booli Admin API
  version: "1.0"
paths:
  /admin/tenants:
    get:
      description: 'Get paginated list of tenants (admin: all tenants, MSP: their
        tenants)'
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List tenants
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new tenant
      parameters:
      - description: Tenant creation request
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create tenant
      tags:
      - admin
  /admin/tenants/{id}:
    delete:
      description: Delete tenant by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete tenant
      tags:
      - admin
    get:
      description: Get tenant by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get tenant
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update tenant by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      - description: Tenant update request
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update tenant
      tags:
      - admin
  /admin/tenants/{id}/provision:
    post:
      description: Provision authentication backend for tenant
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Provision tenant
      tags:
      - admin
  /admin/users:
    get:
      description: Get paginated list of users with optional search and filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 20, min: 1, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Search term for username or email
        in: query
        name: search_term
        type: string
      - description: Filter by user status (active, inactive)
        in: query
        name: status
        type: string
      - description: Filter by user role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /admin/users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /audit/export:
    post:
      consumes:
      - application/json
      description: Export audit logs to various formats
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Export audit logs
      tags:
      - audit
  /audit/logs:
    get:
      description: Get paginated list of audit logs
      parameters:
      - description: Start date
        in: query
        name: start_date
        type: string
      - description: End date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List audit logs
      tags:
      - audit
  /audit/logs/{id}:
    get:
      description: Get audit log by ID
      parameters:
      - description: Audit log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get audit log
      tags:
      - audit
  /auth/callback:
    get:
      description: Handle OAuth2/OIDC callback and exchange code for tokens
      parameters:
      - description: Provider name
        in: query
        name: provider
        type: string
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      - description: State parameter
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Handle OAuth callback
      tags:
      - authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Start OAuth2/OIDC login flow
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            redirect_uri:
              type: string
            state:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Initiate login
      tags:
      - authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate tokens
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Logout
      tags:
      - authentication
  /auth/providers:
    get:
      description: Get list of available OIDC authentication providers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get authentication providers
      tags:
      - authentication
  /auth/providers/{provider}/.well-known:
    get:
      description: Get OIDC well-known configuration for a specific provider
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get provider well-known configuration
      tags:
      - authentication
  /auth/service-token:
    post:
      consumes:
      - application/json
      description: Get service-to-service authentication token
      parameters:
      - description: Service token request
        in: body
        name: request
        required: true
        schema:
          properties:
            client_id:
              type: string
            client_secret:
              type: string
            scope:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Get service token
      tags:
      - authentication
  /auth/service-validate:
    post:
      consumes:
      - application/json
      description: Validate a service-to-service token
      parameters:
      - description: Service token validation request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Validate service token
      tags:
      - authentication
  /auth/userinfo:
    get:
      description: Get user information from access token
      parameters:
      - description: Provider name
        in: query
        name: provider
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user info
      tags:
      - authentication
  /auth/validate:
    post:
      consumes:
      - application/json
      description: Validate an access token or ID token
      parameters:
      - description: Token validation request
        in: body
        name: request
        required: true
        schema:
          properties:
            provider:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Validate token
      tags:
      - authentication
  /environments:
    get:
      consumes:
      - application/json
      description: Get paginated list of tenant environments
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TenantEnvironmentListResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: List environments
      tags:
      - environments
    post:
      consumes:
      - application/json
      description: Create a new tenant environment with network ranges, IPs, domains,
        and infrastructure
      parameters:
      - description: Environment creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateTenantEnvironmentRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TenantEnvironmentSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Create environment
      tags:
      - environments
  /environments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete tenant environment by ID
      parameters:
      - description: Environment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Delete environment
      tags:
      - environments
    get:
      consumes:
      - application/json
      description: Get tenant environment by ID
      parameters:
      - description: Environment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TenantEnvironmentSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get environment
      tags:
      - environments
    put:
      consumes:
      - application/json
      description: Update tenant environment by ID
      parameters:
      - description: Environment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Environment update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTenantEnvironmentRequestSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TenantEnvironmentSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Update environment
      tags:
      - environments
  /environments/access:
    post:
      consumes:
      - application/json
      description: Grant access to an environment for another user or tenant
      parameters:
      - description: Access grant request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateTenantAccessGrantRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TenantAccessGrantSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Grant environment access
      tags:
      - environments
  /environments/access/{grant_id}:
    delete:
      consumes:
      - application/json
      description: Revoke access grant to an environment
      parameters:
      - description: Access Grant ID (UUID)
        in: path
        name: grant_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access revoked successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Revoke environment access
      tags:
      - environments
  /environments/infrastructure:
    get:
      consumes:
      - application/json
      description: Get all infrastructure IPs for the tenant's environments
      produces:
      - application/json
      responses:
        "200":
          description: Infrastructure IPs with metadata
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get infrastructure IPs
      tags:
      - environments
  /environments/lookup:
    get:
      consumes:
      - application/json
      description: Lookup enrichment data for a specific IP address or domain
      parameters:
      - description: Query string (IP address or domain)
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Enrichment lookup result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Lookup enrichment data
      tags:
      - environments
  /environments/networks:
    get:
      consumes:
      - application/json
      description: Get all network ranges for the tenant's environments
      produces:
      - application/json
      responses:
        "200":
          description: Network ranges with metadata
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get network ranges
      tags:
      - environments
  /environments/security-data:
    get:
      consumes:
      - application/json
      description: Get security information and event management (SIEM) enrichment
        data including network ranges, IPs, domains, and infrastructure
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SIEMEnrichmentDataSwagger'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseSwagger'
      security:
      - BearerAuth: []
      summary: Get SIEM enrichment data
      tags:
      - environments
  /health:
    get:
      description: Get application health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check
      tags:
      - health
  /health/keycloak:
    get:
      description: Validate Keycloak configuration and connectivity
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service Unavailable
          schema:
            additionalProperties: true
            type: object
      summary: Keycloak health check
      tags:
      - health
  /sso/providers:
    get:
      description: Get list of SSO providers for tenant
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List SSO providers
      tags:
      - sso
    post:
      consumes:
      - application/json
      description: Create a new SSO provider
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create SSO provider
      tags:
      - sso
  /sso/providers/{id}:
    delete:
      description: Delete SSO provider by ID
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete SSO provider
      tags:
      - sso
    get:
      description: Get SSO provider by ID
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get SSO provider
      tags:
      - sso
    put:
      consumes:
      - application/json
      description: Update SSO provider by ID
      parameters:
      - description: Provider ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update SSO provider
      tags:
      - sso
  /sso/test-connection:
    post:
      consumes:
      - application/json
      description: Test SSO provider connection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Test SSO connection
      tags:
      - sso
  /users:
    get:
      description: Get paginated list of users with optional search and filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 20, min: 1, max: 100)'
        in: query
        name: page_size
        type: integer
      - description: Search term for username or email
        in: query
        name: search_term
        type: string
      - description: Filter by user status (active, inactive)
        in: query
        name: status
        type: string
      - description: Filter by user role
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/bulk-create:
    post:
      consumes:
      - application/json
      description: Create multiple users at once
      parameters:
      - description: Bulk user creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.BulkCreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BulkCreateResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk create users
      tags:
      - users
  /users/import-csv:
    post:
      consumes:
      - multipart/form-data
      description: Import users from CSV file
      parameters:
      - description: CSV file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CSVImportResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Import users from CSV
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
x-servers:
- http://localhost:8081/api/v1
- https://api.booli.local/api/v1
