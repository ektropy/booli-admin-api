version: '3'

vars:
  VERSION:
    sh: git describe --tags --match="v*" --abbrev=0 2>/dev/null | sed 's/^v//' || date -u +"%Y.%m.%d"
  VERSION_FULL:
    sh: git describe --tags --match="v*" --dirty --always 2>/dev/null | sed 's/^v//' || date -u +"%Y.%m.%d"
  COMMIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
  BUILD_TIME:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  LDFLAGS: -s -w -X main.version={{.VERSION_FULL}} -X main.commit={{.COMMIT}} -X main.date={{.BUILD_TIME}}

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  version:
    desc: Show build version information
    cmds:
      - echo "Version{{":"}} {{.VERSION_FULL}}"
      - echo "Commit{{":"}} {{.COMMIT}}"
      - echo "Build Time{{":"}} {{.BUILD_TIME}}"

  deps:
    desc: Install dependencies
    cmds:
      - go mod download
      - go mod verify

  build:
    desc: Build the binary
    deps: [deps]
    cmds:
      - mkdir -p bin
      - CGO_ENABLED=0 go build -ldflags="{{.LDFLAGS}}" -o bin/booli-admin-api ./cmd/server
    generates:
      - bin/booli-admin-api

  test:
    desc: Run unit tests
    cmds:
      - go test ./... -short -v

  test-coverage:
    desc: Run tests with coverage
    cmds:
      - go test ./... -short -coverprofile=coverage.out
      - go tool cover -html=coverage.out -o coverage.html
      - go tool cover -func=coverage.out

  test-integration:
    desc: Run integration tests
    env:
      RUN_INTEGRATION_TESTS: true
    cmds:
      - go test -tags=integration ./tests/integration/... -v -timeout 30m

  fmt:
    desc: Format code
    cmds:
      - go fmt ./...

  lint:
    desc: Run linter
    cmds:
      - go vet ./...
      - go fmt ./...

  tidy:
    desc: Tidy go modules
    cmds:
      - go mod tidy
      - go mod verify

  security:
    desc: Run security scan
    cmds:
      - go vet ./...
      - |
        if command -v gosec >/dev/null 2>&1; then
          gosec ./...
        else
          echo "gosec not installed, skipping security scan"
        fi

  check:
    desc: Run all checks (test, lint, tidy)
    deps: [test, lint, tidy]

  clean:
    desc: Clean build artifacts and generated files
    cmds:
      - rm -rf bin/ dist/ coverage.out coverage.html
      - rm -f *.out *.log booli-admin-api booli-admin-api-test
      - rm -f docs/swagger.json docs/swagger.yaml

  dev:
    desc: Build and run for development
    deps: [build]
    cmds:
      - ./bin/booli-admin-api

  docker-build:
    desc: Build Docker image
    cmds:
      - docker build -t booli-admin-api:{{.VERSION}} .

  docker-test:
    desc: Build Docker test image
    cmds:
      - docker build -t booli-admin-api:test .

  start:
    desc: Start all services
    cmds:
      - docker-compose -f docker-compose.bruno.yml up -d

  stop:
    desc: Stop all services
    cmds:
      - docker-compose -f docker-compose.bruno.yml down

  clean-docker:
    desc: Stop services, remove images, volumes and rebuild
    cmds:
      - docker-compose -f docker-compose.bruno.yml down -v
      - docker image rm -f backend-booli-admin-api || true
      - docker volume prune -f
      - docker-compose -f docker-compose.bruno.yml up -d --build

  swagger:
    desc: Generate Swagger documentation
    cmds:
      - swag init -g cmd/server/main.go -o docs/

  bruno:
    desc: Run full Bruno test suite
    deps: [docker-test]
    cmds:
      - echo "Starting services for Bruno tests..."
      - docker-compose -f docker-compose.bruno.yml --env-file .env.bruno up -d
      - echo "Waiting for all services to be ready..."
      - |
        for i in {1..60}; do
          if curl -f http://localhost:8083/api/admin/v1/health >/dev/null 2>&1; then
            echo "Backend is ready!"
            break
          fi
          echo "Waiting for backend... ($i/60)"
          sleep 3
        done
      - |
        for i in {1..30}; do
          if curl -f http://localhost:8026/api/v1/info >/dev/null 2>&1; then
            echo "Mailpit is ready!"
            break
          fi
          echo "Waiting for Mailpit... ($i/30)"
          sleep 2
        done
      - echo "Running Bruno tests..."
      - cd bruno && bru run --env docker
      - echo "Stopping services..."
      - docker-compose -f docker-compose.bruno.yml --env-file .env.bruno down -v

  bruno-local:
    desc: Run Bruno tests against local services
    cmds:
      - cd bruno && bru run --env local

  snapshot:
    desc: Build snapshot release with goreleaser
    cmds:
      - goreleaser release --snapshot --clean

  release:
    desc: Build and publish release with goreleaser
    cmds:
      - goreleaser release --clean

  release-dry-run:
    desc: Test release configuration without publishing
    cmds:
      - goreleaser release --skip=publish --clean

