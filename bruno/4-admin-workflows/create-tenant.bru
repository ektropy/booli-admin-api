meta {
  name: Create Tenant
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/api/v1/admin/tenants
  body: json
}

headers {
  Authorization: Bearer {{accessToken}}
  Content-Type: application/json
}

script:pre-request {
  // Generate unique domain and name for each test run
  const timestamp = Date.now();
  bru.setEnvVar("testDomain", `test-${timestamp}.example.com`);
  bru.setEnvVar("testTenantName", `Test Tenant ${timestamp}`);
}

body:json {
  {
    "name": "{{testTenantName}}",
    "domain": "{{testDomain}}",
    "type": "client",
    "settings": {
      "enable_sso": true,
      "enable_mfa": false,
      "enable_audit": true,
      "max_users": 100,
      "max_roles": 10,
      "max_sso_providers": 2
    }
  }
}

assert {
  res.status: eq 201
}

script:post-response {
  if (res.getStatus() === 201) {
    const body = res.getBody();
    bru.setEnvVar("tenantId", body.id);
  }
}

tests {
  test("Tenant creation returns 201", function() {
    expect(res.getStatus()).to.equal(201);
  });
  
  test("Response contains tenant ID", function() {
    const body = res.getBody();
    expect(body).to.have.property("id");
    expect(body.name).to.contain("Test Tenant");
  });
}