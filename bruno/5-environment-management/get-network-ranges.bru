meta {
  name: Get Network Ranges
  type: http
  seq: 6
}

get {
  url: {{baseUrl}}/api/v1/environments/networks
  body: none
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

tests {
  test("Status is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is array of network ranges", function() {
    const data = res.getBody();
    expect(data).to.have.property('network_ranges');
    expect(data.network_ranges).to.be.an('array');
  });
  
  test("Network ranges have required fields", function() {
    const data = res.getBody();
    if (data.network_ranges && data.network_ranges.length > 0) {
      const networkRange = data.network_ranges[0];
      expect(networkRange).to.have.property('id');
      expect(networkRange).to.have.property('cidr');
      expect(networkRange).to.have.property('name');
      expect(networkRange).to.have.property('network_type');
      expect(networkRange).to.have.property('environment_id');
      expect(networkRange).to.have.property('tenant_id');
    }
  });
  
  test("CIDR format is valid", function() {
    const data = res.getBody();
    if (data.network_ranges && data.network_ranges.length > 0) {
      const networkRange = data.network_ranges[0];
      expect(networkRange.cidr).to.match(/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/);
    }
  });
  
  test("Network type is valid", function() {
    const data = res.getBody();
    if (data.network_ranges && data.network_ranges.length > 0) {
      const networkRange = data.network_ranges[0];
      expect(['private', 'public', 'dmz']).to.include(networkRange.network_type);
    }
  });
}