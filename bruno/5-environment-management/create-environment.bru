meta {
  name: Create Environment
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}/api/v1/environments
  body: json
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

body:json {
  {
    "tenant_name": "Acme Corporation",
    "name": "production",
    "description": "Production environment for infrastructure management",
    "environment": "prod",
    "network_ranges": [
      {
        "cidr": "10.0.0.0/16",
        "name": "main-network",
        "description": "Main production network",
        "network_type": "private"
      },
      {
        "cidr": "172.16.0.0/12",
        "name": "secondary-network",
        "description": "Secondary network range",
        "network_type": "private"
      }
    ],
    "public_ips": [
      {
        "ip_address": "203.0.113.1",
        "name": "web-server",
        "description": "Web server public IP"
      },
      {
        "ip_address": "203.0.113.2",
        "name": "api-server",
        "description": "API server public IP"
      }
    ],
    "egress_ips": [
      {
        "ip_address": "203.0.113.100",
        "name": "egress-nat",
        "description": "NAT gateway egress IP"
      }
    ],
    "domains": [
      {
        "domain_name": "example.com",
        "name": "main-domain",
        "description": "Main company domain"
      },
      {
        "domain_name": "api.example.com",
        "name": "api-domain",
        "description": "API subdomain"
      }
    ],
    "infrastructure_ips": [
      {
        "ip_address": "10.0.1.10",
        "name": "dns-server",
        "description": "Primary DNS server",
        "service": "dns"
      },
      {
        "ip_address": "10.0.1.11",
        "name": "ntp-server",
        "description": "NTP time server",
        "service": "ntp"
      }
    ],
    "naming_conventions": [
      {
        "resource_type": "server",
        "pattern": "prod-{service}-{number}",
        "description": "Production server naming convention"
      }
    ]
  }
}

tests {
  test("Status is 201", function() {
    expect(res.getStatus()).to.equal(201);
  });
  
  test("Response has environment data", function() {
    const data = res.getBody();
    expect(data).to.have.property('id');
    expect(data).to.have.property('name', 'production');
    expect(data).to.have.property('description', 'Production environment for infrastructure management');
    expect(data).to.have.property('environment', 'prod');
    expect(data).to.have.property('is_active', true);
    expect(data).to.have.property('network_ranges');
    expect(data).to.have.property('public_ips');
    expect(data).to.have.property('domains');
    expect(data).to.have.property('infrastructure_ips');
  });
  
  test("Network ranges are created", function() {
    const data = res.getBody();
    expect(data.network_ranges).to.have.lengthOf(2);
    expect(data.network_ranges[0]).to.have.property('cidr');
    expect(data.network_ranges[0]).to.have.property('name');
  });
  
  test("Public IPs are created", function() {
    const data = res.getBody();
    expect(data.public_ips).to.have.lengthOf(2);
    expect(data.public_ips[0]).to.have.property('ip_address');
    expect(data.public_ips[0]).to.have.property('ip_type');
  });
  
  test("Domains are created", function() {
    const data = res.getBody();
    expect(data.domains).to.have.lengthOf(2);
    expect(data.domains[0]).to.have.property('domain_name');
    expect(data.domains[0]).to.have.property('is_active');
  });
  
  test("Infrastructure IPs are created", function() {
    const data = res.getBody();
    expect(data.infrastructure_ips).to.have.lengthOf(2);
    expect(data.infrastructure_ips[0]).to.have.property('ip_address');
    expect(data.infrastructure_ips[0]).to.have.property('service_type');
  });
}

script:post-response {
  if (res.getStatus() === 201) {
    const data = res.getBody();
    bru.setEnvVar("environment_id", data.id);
  }
}