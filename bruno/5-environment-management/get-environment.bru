meta {
  name: Get Environment
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/api/v1/environments/{{environment_id}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

tests {
  test("Status is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has environment data", function() {
    const data = res.getBody();
    expect(data).to.have.property('id', bru.getEnvVar("environment_id"));
    expect(data).to.have.property('name');
    expect(data).to.have.property('description');
    expect(data).to.have.property('environment');
    expect(data).to.have.property('is_active');
  });
  
  test("Environment has infrastructure data", function() {
    const data = res.getBody();
    expect(data).to.have.property('network_ranges');
    expect(data).to.have.property('public_ips');
    expect(data).to.have.property('egress_ips');
    expect(data).to.have.property('domains');
    expect(data).to.have.property('infrastructure_ips');
    expect(data).to.have.property('naming_conventions');
  });
  
  test("Network ranges have required fields", function() {
    const data = res.getBody();
    if (data.network_ranges && data.network_ranges.length > 0) {
      const networkRange = data.network_ranges[0];
      expect(networkRange).to.have.property('cidr');
      expect(networkRange).to.have.property('name');
      expect(networkRange).to.have.property('network_type');
    }
  });
  
  test("Infrastructure IPs have required fields", function() {
    const data = res.getBody();
    if (data.infrastructure_ips && data.infrastructure_ips.length > 0) {
      const infraIP = data.infrastructure_ips[0];
      expect(infraIP).to.have.property('ip_address');
      expect(infraIP).to.have.property('service_type');
      expect(infraIP).to.have.property('hostname');
    }
  });
}