meta {
  name: Get Platform Admin Token
  type: http
  seq: 1
}

post {
  url: {{keycloakUrl}}/realms/msp-acme-local/protocol/openid-connect/token
  body: formUrlEncoded
}

headers {
  Content-Type: application/x-www-form-urlencoded
}

body:form-urlencoded {
  grant_type: password
  username: {{adminUser}}
  password: {{adminPassword}}
  client_id: msp-client
  scope: openid profile email
}

assert {
  res.status: eq 200
}

script:post-response {
  if (res.getStatus() === 200) {
    const body = res.getBody();
    
    // Store the platform admin token for use across tests
    bru.setEnvVar("platformAdminToken", body.access_token);
    bru.setEnvVar("accessToken", body.access_token); // Legacy compatibility
    bru.setEnvVar("refreshToken", body.refresh_token);
    
    
    // Parse token to see user info (for verification)
    try {
      const payload = JSON.parse(atob(body.access_token.split('.')[1]));
    } catch (e) {
    }
  }
}

tests {
  test("Authentication returns 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response contains access token", function() {
    const body = res.getBody();
    expect(body).to.have.property("access_token");
    expect(body.access_token).to.be.a("string");
    expect(body.access_token.length).to.be.greaterThan(100);
  });
  
  test("Token includes required fields", function() {
    const body = res.getBody();
    expect(body).to.have.property("token_type", "Bearer");
    expect(body).to.have.property("expires_in");
    expect(body).to.have.property("refresh_token");
    expect(body).to.have.property("scope");
  });
  
  test("Scope includes OpenID", function() {
    const body = res.getBody();
    expect(body.scope).to.include("openid");
  });
}