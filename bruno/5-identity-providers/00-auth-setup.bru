meta {
  name: Authentication Setup
  type: http
  seq: 1
}

post {
  url: {{keycloakUrl}}/realms/master/protocol/openid-connect/token
  body: formUrlEncoded
}

body:form-urlencoded {
  grant_type: password
  client_id: msp-client
  client_secret: test-secret
  username: {{adminUser}}
  password: {{adminPassword}}
}

assert {
  res.status: eq 200
  res.body.access_token: isDefined
}

script:post-response {
  if (res.getStatus() === 200) {
    const body = res.getBody();
    bru.setEnvVar("accessToken", body.access_token);
    
    // Also extract tenant information from token for later use
    try {
      // Decode JWT payload (base64 decode the middle part)
      const payloadB64 = body.access_token.split('.')[1];
      const payload = JSON.parse(atob(payloadB64));
      
      // Extract tenant realm if available
      if (payload.realm_access && payload.realm_access.roles) {
        console.log("Available roles:", payload.realm_access.roles);
      }
      
      // For testing, we'll use master realm initially
      bru.setEnvVar("tenantRealm", "master");
      
    } catch (e) {
      console.log("Could not decode token payload:", e);
    }
  }
}

tests {
  test("Authentication successful", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Access token received", function() {
    const body = res.getBody();
    expect(body).to.have.property("access_token");
    expect(body.access_token).to.be.a("string");
  });
  
  test("Token set in environment", function() {
    expect(bru.getEnvVar("accessToken")).to.be.a("string");
    expect(bru.getEnvVar("accessToken").length).to.be.greaterThan(0);
  });
}