meta {
  name: Create Microsoft Identity Provider
  type: http
  seq: 4
}

post {
  url: {{baseUrl}}/identity-providers
  body: json
}

headers {
  Authorization: Bearer {{accessToken}}
  Content-Type: application/json
  X-Auth-Provider: keycloak
}

script:pre-request {
  const timestamp = Date.now();
  bru.setEnvVar("microsoftProviderAlias", `test-microsoft-${timestamp}`);
}

body:json {
  {
    "alias": "{{microsoftProviderAlias}}",
    "display_name": "Test Microsoft Provider",
    "type": "microsoft",
    "enabled": true,
    "config": {
      "client_id": "azure-client-id",
      "client_secret": "azure-client-secret",
      "azure_tenant_id": "tenant-123",
      "default_scopes": ["openid", "profile", "email"],
      "trust_email": true,
      "store_token": true,
      "link_only": false
    }
  }
}

assert {
  res.status: eq 201
}

script:post-response {
  if (res.getStatus() === 201) {
    const body = res.getBody();
    bru.setEnvVar("createdMicrosoftProviderAlias", body.alias);
  }
}

tests {
  test("Microsoft provider creation returns 201", function() {
    expect(res.getStatus()).to.equal(201);
  });

  test("Response contains provider details", function() {
    const body = res.getBody();
    expect(body).to.have.property("alias");
    expect(body.type).to.equal("microsoft");
    expect(body.enabled).to.equal(true);
    expect(body.display_name).to.equal("Test Microsoft Provider");
  });

  test("Config contains Microsoft-specific settings", function() {
    const body = res.getBody();
    expect(body.config).to.have.property("clientId", "azure-client-id");
    expect(body.config.authorizationUrl).to.contain("login.microsoftonline.com");
    expect(body.config.tokenUrl).to.contain("login.microsoftonline.com");
  });
}