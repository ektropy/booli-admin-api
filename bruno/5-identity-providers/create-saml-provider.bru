meta {
  name: Create SAML Identity Provider
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}/identity-providers
  body: json
}

headers {
  Authorization: Bearer {{accessToken}}
  Content-Type: application/json
  X-Auth-Provider: keycloak
}

script:pre-request {
  const timestamp = Date.now();
  bru.setEnvVar("samlProviderAlias", `test-saml-${timestamp}`);
}

body:json {
  {
    "alias": "{{samlProviderAlias}}",
    "display_name": "Test SAML Provider",
    "type": "saml",
    "enabled": true,
    "config": {
      "sso_service_url": "https://saml.example.com/sso",
      "entity_id": "https://saml.example.com/metadata",
      "signing_certificate": "MIICertificateData...",
      "trust_email": true,
      "store_token": false,
      "link_only": false,
      "attribute_mappings": [
        {
          "name": "saml-email-mapper",
          "user_attribute": "email",
          "attribute_name": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
          "sync_mode": "FORCE"
        }
      ]
    }
  }
}

assert {
  res.status: eq 201
}

script:post-response {
  if (res.getStatus() === 201) {
    const body = res.getBody();
    bru.setEnvVar("createdSamlProviderAlias", body.alias);
  }
}

tests {
  test("SAML provider creation returns 201", function() {
    expect(res.getStatus()).to.equal(201);
  });

  test("Response contains provider details", function() {
    const body = res.getBody();
    expect(body).to.have.property("alias");
    expect(body.type).to.equal("saml");
    expect(body.enabled).to.equal(true);
    expect(body.display_name).to.equal("Test SAML Provider");
  });

  test("Config contains SAML-specific settings", function() {
    const body = res.getBody();
    expect(body.config).to.have.property("singleSignOnServiceUrl", "https://saml.example.com/sso");
    expect(body.config).to.have.property("entityId", "https://saml.example.com/metadata");
    expect(body.config).to.have.property("signingCertificate", "MIICertificateData...");
  });
}