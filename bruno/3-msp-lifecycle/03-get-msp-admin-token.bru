meta {
  name: Get MSP Admin Token
  type: http
  seq: 3
}

post {
  url: {{keycloakUrl}}/realms/{{mspRealm1}}/protocol/openid-connect/token
  body: formUrlEncoded
}

headers {
  Content-Type: application/x-www-form-urlencoded
}

body:form-urlencoded {
  grant_type: password
  username: admin
  password: admin
  client_id: msp-client
  client_secret: {{clientSecret}}
  scope: openid profile email
}

assert {
  res.status: eq 200
}

script:post-response {
  if (res.getStatus() === 200) {
    const body = res.getBody();
    
    // Store the MSP admin token
    bru.setEnvVar("mspAdminToken1", body.access_token);
    
    
    // Parse token to see user info
    try {
      const payload = JSON.parse(atob(body.access_token.split('.')[1]));
      
      if (payload.realm_access?.roles) {
        
        // Check for MSP admin role
        if (payload.realm_access.roles.includes('msp-admin')) {
          bru.setEnvVar("mspAdminHasRole1", "true");
        }
      }
      
      // Store additional info
      bru.setEnvVar("mspAdminUserId1", payload.sub);
      bru.setEnvVar("mspAdminEmail1", payload.email);
      
    } catch (e) {
      console.log("Failed to parse MSP admin token:", e.message);
    }
  }
}

tests {
  test("MSP admin authentication returns 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response contains access token", function() {
    const body = res.getBody();
    expect(body).to.have.property("access_token");
    expect(body.access_token).to.be.a("string");
    expect(body.access_token.length).to.be.greaterThan(100);
  });
  
  test("Token includes required fields", function() {
    const body = res.getBody();
    expect(body).to.have.property("token_type", "Bearer");
    expect(body).to.have.property("expires_in");
    expect(body).to.have.property("scope");
  });
  
  test("Scope includes OpenID", function() {
    const body = res.getBody();
    expect(body.scope).to.include("openid");
  });
  
  test("Token realm matches MSP realm", function() {
    const body = res.getBody();
    const mspRealm = bru.getEnvVar("mspRealm1");
    
    try {
      const payload = JSON.parse(atob(body.access_token.split('.')[1]));
      const tokenRealm = payload.iss.split('/').pop();
      expect(tokenRealm).to.equal(mspRealm);
    } catch (e) {
      // If token parsing fails, the test should still pass if we got a token
      expect(body.access_token).to.be.a("string");
    }
  });
}