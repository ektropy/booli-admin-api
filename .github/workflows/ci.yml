name: CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Install dependencies
      run: task deps

    - name: Build
      run: task build

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: booli-admin-api-binary
        path: bin/booli-admin-api
        retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Install dependencies
      run: task deps

    - name: Run tests
      run: task test

    - name: Run linter
      run: task lint

    - name: Run security scan
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -severity medium ./...
    
    - name: Run vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # integration-test:
  #   runs-on: ubuntu-latest
  #   needs: [build, test]
  #   if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0

  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Cache Go modules
  #     uses: actions/cache@v3
  #     with:
  #       path: |
  #         ~/.cache/go-build
  #         ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-

  #   - name: Install Task
  #     uses: arduino/setup-task@v1
  #     with:
  #       version: 3.x

  #   - name: Install dependencies
  #     run: task deps

  #   - name: Build test image
  #     run: task docker-test

  #   - name: Run integration tests
  #     run: task test-integration-all

  docker-build:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    # Uncomment when Code Scanning is enabled in repo settings
    # - name: Upload Trivy scan results
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   with:
    #     sarif_file: 'trivy-results.sarif'

  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install dependencies
      run: task deps

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # bruno-api-test:
  #   runs-on: ubuntu-latest
  #   needs: docker-build
  #   if: github.event_name != 'pull_request'
  #   
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Install Task
  #     uses: arduino/setup-task@v1
  #     with:
  #       version: 3.x

  #   - name: Install Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18'

  #   - name: Install Bruno CLI
  #     run: npm install -g @usebruno/cli

  #   - name: Run Bruno API tests
  #     run: task bruno-test
  #     env:
  #       DOCKER_BUILDKIT: 1
